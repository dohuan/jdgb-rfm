{
  "pipelineSpec": {
    "components": {
      "comp-dbt-post-process": {
        "executorLabel": "exec-dbt-post-process",
        "inputDefinitions": {
          "parameters": {
            "run_date": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "ifSuccess": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-dbtrun": {
        "executorLabel": "exec-dbtrun"
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-dbt-post-process": {
          "container": {
            "args": [
              "--run-date",
              "{{$.inputs.parameters['run_date']}}",
              "----output-paths",
              "{{$.outputs.parameters['ifSuccess'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def dbt_post_process(\n    run_date\n):\n    import os\n    from collections import namedtuple\n    from google.oauth2 import service_account\n    from src.helper.helper import send_msg_to_pubsub\n\n    creds = service_account.Credentials.from_service_account_file(\n        os.environ.get(\"GOOGLE_KEY_FILE_PATH\"))\n    out = send_msg_to_pubsub(\n        \"rfm-controller\",\n        credential=creds,\n        message={\"run_date\": run_date, \"status\": \"success\"}\n    )\n    run_output = namedtuple('runStatus', ['ifSuccess'])\n    return run_output(str(out))\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Dbt post process', description='')\n_parser.add_argument(\"--run-date\", dest=\"run_date\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = dbt_post_process(**_parsed_args)\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "gcr.io/awesome_company-rfm-dev/rfm:latest"
          }
        },
        "exec-dbtrun": {
          "container": {
            "command": [
              "dbt",
              "run",
              "--profiles-dir",
              ".",
              "--vars",
              "{project_id: awesome_company-rfm-dev, dataset: main, run_date: 2022-09-29}"
            ],
            "image": "gcr.io/awesome_company-rfm-dev/rfm-dbt-runner:latest"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "calculate-rfm"
    },
    "root": {
      "dag": {
        "tasks": {
          "dbt-post-process": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-dbt-post-process"
            },
            "dependentTasks": [
              "dbtrun"
            ],
            "inputs": {
              "parameters": {
                "run_date": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "2022-09-29"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "dbt-post-process"
            }
          },
          "dbtrun": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-dbtrun"
            },
            "taskInfo": {
              "name": "dbtrun"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.6.6"
  },
  "runtimeConfig": {}
}